apply plugin: 'com.android.application'
//apply plugin: 'kotlin-android'
//apply from: 'tinker-support.gradle'//微信热修复

android {
    compileSdkVersion rootProject.ext.android.ANDROID_COMPILE_SDK_VERSION
    buildToolsVersion rootProject.ext.android.ANDROID_BUILD_TOOLS_VERSION

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    defaultConfig {
        applicationId "com.song.sunset"
        minSdkVersion rootProject.ext.android.ANDROID_BUILD_MIN_SDK_VERSION
        targetSdkVersion rootProject.ext.android.ANDROID_TARGET_SDK_VERSION
        versionCode rootProject.ext.android.ANDROID_VERSION_CODE
        versionName rootProject.ext.android.ANDROID_VERSION_NAME
//        jackOptions {
//            enabled true
//        }
        multiDexEnabled true
    }

    signingConfigs {
        release {
            storeFile file(STORE_FILE)
            storePassword KEYSTORE_PASSWORD
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
        }
    }

//    buildTypes {
//        debug {
//            zipAlignEnabled true  //是否支持zip
//            minifyEnabled false
//            debuggable true
//            signingConfig signingConfigs.release
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
////            applicationVariants.all { variant ->
////                variant.outputs.each { output ->
////                    def outputFile = output.outputFile
////                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
////                        // apk name  XXXX.apk
////                        def fileName = "Sunset_debug.apk"
////                        output.outputFile = new File(outputFile, fileName)
////                    }
////                }
////            }
//        }
//        release {
//            zipAlignEnabled true  //是否支持zip
//            minifyEnabled false  //是否进行混淆
//            signingConfig signingConfigs.release
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
////            applicationVariants.all { variant ->
////                variant.outputs.each { output ->
////                    def outputFile = output.outputFile
////                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
////                        // apk name  XXXX.apk
////                        def fileName = "Sunset_release.apk"
////                        output.outputFile = new File(outputFile, fileName)
////                    }
////                }
////            }
//        }
//    }


    sourceSets {
//        main.java.srcDirs += 'src/main/kotlin'

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
//    compileOptions {
//        sourceCompatibility 1.8
//        targetCompatibility 1.8
//    }
    buildToolsVersion '25.0.3'
}
//--------------------------greenDao配置--------------------------
apply plugin: 'org.greenrobot.greendao'
greendao {
    schemaVersion 2
    daoPackage 'com.sunset.greendao.gen'
    targetGenDir 'src/main/java'
}
//--------------------------greenDao配置--------------------------

repositories {
    mavenCentral()
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:appcompat-v7:${rootProject.ext.android.ANDROID_APPCOMPAT_VERSION}"
    compile "com.android.support:design:${rootProject.ext.android.ANDROID_APPCOMPAT_VERSION}"
    compile "com.android.support:cardview-v7:${rootProject.ext.android.ANDROID_APPCOMPAT_VERSION}"
    compile "com.android.support:palette-v7:${rootProject.ext.android.ANDROID_APPCOMPAT_VERSION}"

    compile rootProject.ext.dependencies["multidex"]
    compile rootProject.ext.dependencies["BaseRecyclerViewAdapterHelper"]
//    compile rootProject.ext.dependencies["glide"]
//    compile rootProject.ext.dependencies["glide-transformations"]
    compile rootProject.ext.dependencies["glide-4.0-transformations"]
    compile rootProject.ext.dependencies["gpuimage_library"]
    compile rootProject.ext.dependencies["fresco"]
    compile rootProject.ext.dependencies["fresco_processors"]
    compile rootProject.ext.dependencies["imagepipeline-okhttp3"]
    compile rootProject.ext.dependencies["volley"]
    compile rootProject.ext.dependencies["swipebacklayout"]
    compile rootProject.ext.dependencies["subsampling_scale_image_view"]
    compile rootProject.ext.dependencies["ijkplayer_java"]
    compile rootProject.ext.dependencies["ijkplayer_armv7a"]
//    compile rootProject.ext.dependencies["ijkplayer_arm64"]
//    compile rootProject.ext.dependencies["ijkplayer_x86_64"]
    compile rootProject.ext.dependencies["okhttp3"]
    compile rootProject.ext.dependencies["retrofit2"]
    compile rootProject.ext.dependencies["retrofit2_converter_gson"]
    compile rootProject.ext.dependencies["retrofit2_adapter_rxjava"]
    compile rootProject.ext.dependencies["okhttp3_logging_interceptor"]
    compile rootProject.ext.dependencies["rxandroid"]
    compile rootProject.ext.dependencies["rxjava"]
    compile rootProject.ext.dependencies["rxpermissions"]
    compile rootProject.ext.dependencies["fragmentation"]
    compile rootProject.ext.dependencies["fragmentation_swipeback"]
    compile rootProject.ext.dependencies["butterknife"]
    compile rootProject.ext.dependencies["FlycoTabLayout_Lib"]
    compile rootProject.ext.dependencies["greendao_generator"]
    compile rootProject.ext.dependencies["greendao"]
    compile rootProject.ext.dependencies["rapid_decoder_library"]
    compile rootProject.ext.dependencies["rapid_jpeg_decoder"]
    compile rootProject.ext.dependencies["rapid_png_decoder"]
    compile rootProject.ext.dependencies["ultra_ptr"]
    compile rootProject.ext.dependencies["switchbutton"]
    compile rootProject.ext.dependencies["DanmakuFlameMaster"]
    compile rootProject.ext.dependencies["ndkbitmap-armv7a"]
    compile rootProject.ext.dependencies["ndkbitmap-armv5"]
    compile rootProject.ext.dependencies["ndkbitmap-x86"]
    debugCompile rootProject.ext.dependencies["leakcanary_debug"]
    releaseCompile rootProject.ext.dependencies["leakcanary_release"]
    compile 'com.android.support:support-v4:25.3.1'
    testCompile 'junit:junit:4.12'
}